###################################
## Meraki Logstash Configuration ##
##        Input RabbitMQ         ##
##            Filter             ##
##     Output Elasticsearch      ##
###################################

input {
  rabbitmq {
    queue => "meraki-queue"
    exchange => "meraki"
    host => ""
    durable => true
    port =>
    ssl => true
    prefetch_count => 2048
    threads => 4
    user => ""
    password => ""
  }
}

filter {
  if "meraki" in [tags] {
    if [type] == "flows" {
      grok {
        match => { "message" => "%{FLOWS}" }
      }

      if [action] == "0" {
        mutate {
          replace => { "action" => "deny" }
        }
      }

      else if [action] == "1" {
        mutate {
          replace => { "action" => "allow" }
        }
      }
    }

    if [type] == "urls" {
      grok {
        match => { "message" => "%{URLS}" }
      }
    }

    if [type] == "appliance_events" {
      grok {
        match => { "message" => "%{APPLIANCE_EVENTS}" }
      }
    }

    if [type] == "ids" {
      grok {
        match => { "message" => "%{IDS}" }
      }
    }

    if [type] == "wireless_events" {
      grok {
        match => { "message" => "%{WIRELESS_EVENTS}" }
      }
    }

    # Changes to the document
    if [dst_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [dst_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [dst_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ and [dst_ip] {
      if !("_grokparsefailure" in [tags]) {
        # Add dshield field based on dst_ip
        mutate {
          add_field => { "dshield_dst" => "http://dshield.org/ipinfo.html?ip=%{dst_ip}" }
        }

        # Set geoip for dst_ip
        geoip {
          source => "dst_ip"
          target => "dst_geoip"
        }

        # Add field "blacklisted_dst" which will be a boolean value based off "dst_ip"
        translate {
          field => "dst_ip"
          dictionary_path => "/etc/logstash/dictionaries/blacklist.yaml"
          destination => "blacklisted_dst"
          fallback => "no"
        }

        # Remove unnecessary fields created by geoip
        mutate {
          remove_field => [ "[dst_geoip][area_code]", "[dst_geoip][country_code2]", "[dst_geoip][dma_code]", "[dst_geoip][ip]", "[dst_geoip][latitude]", "[dst_geoip][longitude]", "[dst_geoip][postal_code]", "[dst_geoip][region_name]", "[dst_geoip][timezone]" ]
        }
      }
    }

    # Add field "hostname_dst" based on the value in "dst_ip"
    else {
      translate {
        field => "dst_ip"
        dictionary_path => "/etc/logstash/dictionaries/dns_resolution.yaml"
        destination => "hostname_dst"
      }
    }

    if [src_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [src_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [src_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ and [src_ip] {
      if !("_grokparsefailure" not in [tags]) {
        # Add dshield field based on src_ip
        mutate {
          add_field => { "dshield_src" => "http://dshield.org/ipinfo.html?ip=%{src_ip}" }
        }

        # Set geoip for src_ip
        geoip {
          source => "src_ip"
          target => "src_geoip"
        }

        # Add field "blacklisted_src" which will be a boolean value based on "src_ip"
        translate {
          field => "src_ip"
          dictionary_path => "/etc/logstash/dictionaries/blacklist.yaml"
          destination => "blacklisted_src"
          fallback => "no"
        }

        # Remove unnecessary fields created by geoip
        mutate {
          remove_field => [ "[src_geoip][area_code]", "[src_geoip][country_code2]", "[src_geoip][dma_code]", "[src_geoip][ip]", "[src_geoip][latitude]", "[src_geoip][longitude]", "[src_geoip][postal_code]", "[src_geoip][region_name]", "[src_geoip][timezone]" ]
        }
      }
    }

    # Add field "hostname_src" based on the value in "src_ip"
    else {
      translate {
        field => "src_ip"
        dictionary_path => "/etc/logstash/dictionaries/dns_resolution.yaml"
        destination => "hostname_src"
      }
    }

    mutate {
      # Remove any spaces trailing the value
      strip => ["timestamp"]

      # Add field time_received with vale of @timestamp
      add_field => { "time_received" => "%{@timestamp}" }
    }

    mutate {
      convert => { "timestamp" => "float" }
    }

    if [timestamp] and [timestamp] > 1457563120 {
      # Set timestamp field as @timestamp and remove it
      date {
        match => [ "timestamp", "UNIX" ]
        remove_field => [ "timestamp" ]
      }
    }
  }
}

output {
  if "meraki" in [tags] {
    elasticsearch {
      ssl => true
      user => ""
      password => ""
      hosts => [""]
      index => "meraki-%{+YYYY.MM.dd}"
      manage_template => false
      workers => 8
    }

    if "_grokparsefailure" in [tags] {
      email {
        address => ""
        from => "logstash@domain.com"
        to => ""
        subject => "Grok Parse Failure for %{type}"
        body => "%{message}"
      }
    }
  }
}
