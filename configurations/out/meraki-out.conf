input {
  rabbitmq {
    queue => "meraki-queue"
    exchange => "meraki"
    host => "x.x.x.x"
    durable => true
    port => 5671
    ssl => true
    verify_ssl => true
    prefetch_count => 2048
    threads => 4
  }
}

filter {
  if [type] == "ids" {
    grok {
      match => { "message" => "%{IDS}" }
    }
  }

  else if [type] == "flows" {
    grok {
      match => { "message" => "%{FLOWS_MX1}" }
      match => { "message" => "%{FLOWS_MX2}" }
      match => { "message" => "%{FLOWS_MX3}" }
      match => { "message" => "%{FLOWS_Z1}" }
      match => { "message" => "%{FLOWS_AP1}" }
      match => { "message" => "%{FLOWS_AP2}" }
      match => { "message" => "%{FLOWS_AP3}" }
      match => { "message" => "%{FLOWS_AP4}" }
      match => { "message" => "%{FLOWS_AP5}" }
    }
  }

  else if [type] == "urls" {
    grok {
      match => { "message" => "%{URLS1}" }
      match => { "message" => "%{URLS2}" }
    }
  }

  else if [type] == "appliance_events" {
    grok {
      match => { "message" => "%{VPN1}" }
      match => { "message" => "%{VPN2}" }
      match => { "message" => "%{FILTER}" }
      match => { "message" => "%{SECURITY}" }
      match => { "message" => "%{DHCP}" }
      match => { "message" => "%{ROUTE1}" }
      match => { "message" => "%{ROUTE2}" }
    }
  }

  # Changes to the document
  if [type] == "flows" or [type] == "ids" or [type] == "urls" or [type] == "appliance_events" {
    if [dst_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [dst_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [dst_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ {
      # Add dshield field
      mutate {
        add_field => { "dshield_dst" => "http://dshield.org/ipinfo.html?ip=%{dst_ip}" }
      }

      # Set geoip for destination address
      geoip {
        source => "dst_ip"
        target => "dst_geoip"
      }
    }

    if [src_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [src_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [src_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ {
      # Add dshield field
      mutate {
        add_field => { "dshield_src" => "http://dshield.org/ipinfo.html?ip=%{src_ip}" }
      }

      # Set geoip for source address
      geoip {
        source => "src_ip"
        target => "src_geoip"
      }
    }

    mutate {
      # Remove any spaces trailing the value
      strip => ["timestamp"]

      # Add field time_received with vale of @timestamp
      add_field => { "time_received" => "%{@timestamp}" }
    }

    if [timestamp] != 0 {
      # Set timestamp field as @timestamp and remove it
      date {
        match => [ "timestamp", "UNIX" ]
        remove_field => ["timestamp" ]
      }
    }
  }
}

output {
  if [type] == "flows" or [type] == "ids" or [type] == "urls" or [type] == "appliance_events" {
    elasticsearch {
      hosts => ["x.x.x.x"]
      index => "meraki-%{+YYYY.MM.dd}"
      manage_template => false
    }
  }
}
