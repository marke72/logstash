####################################
## Netflow Logstash Configuration ##
##         Input RabbitMQ         ##
##             Filter             ##
##      Output Elasticsearch      ##
####################################

input {
  rabbitmq {
    queue => "netflow-queue"
    exchange => "netflow"
    host => ""
    durable => true
    port =>
    ssl => true
    prefetch_count => 2048
    threads => 8
    user => ""
    password => ""
  }
}

filter {
  if [type] == "netflow" {
    mutate {
      rename => { "[netflow][flow_seq_num]" => "flow_seq_num" }
      rename => { "[netflow][flowset_id]" => "flowset_id" }
      rename => { "[netflow][in_bytes]" => "in_bytes" }
      rename => { "[netflow][in_pkts]" => "in_pkts" }
      rename => { "[netflow][ipv4_dst_addr]" => "dst_ip" }
      rename => { "[netflow][ipv4_src_addr]" => "src_ip" }
      rename => { "[netflow][l4_dst_port]" => "dst_port" }
      rename => { "[netflow][l4_src_port]" => "src_port" }
      rename => { "[netflow][out_bytes]" => "out_bytes" }
      rename => { "[netflow][out_pkts]" => "out_pkts" }
      rename => { "[netflow][protocol]" => "protocol" }
      rename => { "[netflow][version]" => "version" }
      remove_field => [ "[netflow][version]", "[netflow][input_snmp]" ]

      # Add a field "date" equal to a recent date, in this case 2016-03-09T16:17:17-07:00
      add_field => { "date" => 1457565437 }
    }

    # Add field "appliance_name" based off the value of "host"
    translate {
      field => "host"
      dictionary_path => "/etc/logstash/dictionaries/appliance_name.yaml"
      destination => "appliance_name"
      fallback => "updateme"
    }

    # Add field "protocol_name" based on the value in "protocol"
    translate {
      field => "protocol"
      dictionary_path => "/etc/logstash/dictionaries/protocol_name.yaml"
      destination => "protocol_name"
      fallback => "unassigned"
    }

    if [dst_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [dst_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [dst_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ {
      # Add ip_lookup and dshield field
      mutate {
        add_field => { "ip_lookup" => "https://who.is/whois-ip/ip-address/%{dst_ip}" }
        add_field => { "dshield_dst" => "http://dshield.org/ipinfo.html?ip=%{dst_ip}" }
      }

      # Add geoip information based of destination address
      geoip {
        source => "dst_ip"
        target => "dst_geoip"
      }

      # Add field "blacklisted_dst" which will be a boolean value based off "dst_ip"
      translate {
        field => "dst_ip"
        dictionary_path => "/etc/logstash/dictionaries/blacklist.yaml"
        destination => "blacklisted_dst"
        fallback => "no"
      }

      # Remove unnecessary fields created by geoip
      mutate {
        remove_field => [ "[dst_geoip][area_code]", "[dst_geoip][country_code2]", "[dst_geoip][dma_code]", "[dst_geoip][ip]", "[dst_geoip][postal_code]", "[dst_geoip][region_name]", "[dst_geoip][timezone]" ]
      }
    }

    else {
      # Add field "hostname_dst" based on the value in "dst_ip"
      translate {
        field => "dst_ip"
        dictionary_path => "/etc/logstash/dictionaries/dns_resolution.yaml"
        destination => "hostname_dst"
      }
    }

    # Add field "hostname_src" based on the value in "src_ip"
    translate {
      field => "src_ip"
      dictionary_path => "/etc/logstash/dictionaries/dns_resolution.yaml"
      destination => "hostname_src"
    }

    # Make sure field "date" is truly a number
    mutate {
      convert => { "date" => "integer" }
    }

    # Add field "timestamp" in the UNIX form of the value of @timestamp
    ruby {
      code => "
        event['timestamp'] = event['@timestamp'].to_i
      "
    }

    # If an event's time is less than a recent date, use the current time
    if [timestamp] and [date] and [timestamp] < [date] {
      ruby {
        code => "
          event['now'] = Time.now.utc.iso8601
        "
      }

      # Set field "@timstamp" with current time
      date {
        match => [ "now", "ISO8601" ]
      }

      # Remove field "now"
      mutate {
        remove_field => [ "now" ]
      }
    }

    # Remove fields "date" and "timestamp"
    mutate {
      remove_field => [ "date", "timestamp" ]
    }
  }
}

output {
  if [type] == "netflow" {
    elasticsearch {
      ssl => true
      user => ""
      password => ""
      hosts => [""]
      index => "netflow-%{+YYYY.MM.dd}"
      manage_template => false
      workers => 8
    }

    #csv {
     # fields => ["@timestamp", "host", "flow_seq_num", "flowset_id", "in_bytes", "in_pkts", "dst_ip", "src_ip", "dst_port", "src_port", "out_bytes", "out_pkts", "protocol", "appliance_name", "protocol_name", "[dst_geoip][country_code3]", "[dst_geoip][country_name]", "[dst_geoip][continent_code]", "[dst_geoip][city_name]", "[dst_geoip][latitude]", "[dst_geoip][longitude]", "[dst_geoip][real_region_name]", "[dst_geoip][location]", "blacklisted_dst", "hostname_src", "hostname_dst"]
      #path => "/powerbi/netflow.csv"
    #}
  }
}
