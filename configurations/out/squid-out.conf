##################################
## Squid Logstash Configuration ##
##        Input RabbitMQ        ##
##            Filter            ##
##     Output Elasticsearch     ##
##################################

input {
  rabbitmq {
    queue => "squid-queue"
    exchange => "squid"
    host => ""
    durable => true
    port =>
    ssl => true
    prefetch_count => 2048
    user => ""
    password => ""
  }
}

filter {
  if [type] == "squid" {
    grok {
      match => { "message" => "%{SQUID}" }
    }

    # Set field timestamp as @timestamp and remove it
    mutate {
      strip => ["timestamp"]

      # Create field time_received with value of @timestamp
      add_field => { "time_received" => "%{@timestamp}" }

      # Remove unwanted field port
      remove_field => [ "port" ]
    }
    date {
      match => [ "timestamp", "UNIX" ]
      remove_field => [ "timestamp" ]
    }

    # Add dshield field
    if [dst_ip] {
      if [dst_ip] !~ /^10\.(?:[0-9]{1,3}\.){2}[0-9]{1,3}$/ and [dst_ip] !~ /^172\.16\.[0-9]{1,3}\.[0-9]{1,3}$/ and [dst_ip] !~ /^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$/ {
        mutate {
          add_field => { "dshield_dst" => "http://dshield.org/ipinfo.html?ip=%{dst_ip}" }
        }

        geoip {
          source => "dst_ip"
          target => "dst_geoip"
        }

        # Remove unnecessary fields created by geoip
        mutate {
          remove_field => [ "[dst_geoip][area_code]", "[dst_geoip][country_code2]", "[dst_geoip][dma_code]", "[dst_geoip][ip]", "[dst_geoip][latitude]", "[dst_geoip][longitude]", "[dst_geoip][postal_code]", "[dst_geoip][region_name]", "[dst_geoip][timezone]" ]
        }
        # Add field "blacklisted" based on field "dst_ip"
        translate {
          field => "dst_ip"
          dictionary_path => "/etc/logstash/dictionaries/blacklist.dct"
          destination => "blacklisted"
          fallback => "no"
        }
      }
    }

    # Add "hostname_src" field based on field "src_ip"
    translate {
      field => "src_ip"
      dictionary_path => "/etc/logstash/dictionaries/dns_resolution.dct"
      destination => "hostname_src"
    }

    # Add "squid_host" field based on field "host"
    translate {
      field => "host"
      dictionary_path => "/etc/logstash/dictionaries/squid_hostname.dct"
      destination => "squid_host"
      fallback => "updateme"
    }
  }
}

output {
  if [type] == "squid" {
    elasticsearch {
      ssl => true
      user => ""
      password => ""
      hosts => [""]
      index => "squid-%{+YYYY.MM.dd}"
      manage_template => false
    }
  }
}
