####################################
## Windows Logstash Configuration ##
##         Input RabbitMQ         ##
##             Filter             ##
##      Output Elasticsearch      ##
####################################

input {
  rabbitmq {
    queue => "windows-queue"
    exchange => "windows"
    host => ""
    durable => true
    port =>
    ssl => true
    prefetch_count => 2048
    threads => 8
    user => ""
    password => ""
  }
}

filter {
  if "windows" in [tags] {
    if [type] == "dns" {
      grok {
        match => { "message" => "%{WIN_DNS}" }
      }

      # Remove everything except the second-level and top-level domain names
      mutate {
        gsub => [ "dns_query_name", "(.*\))(?=.*\(\d\)\w+\(0\))", "" ]
      }

      mutate {
        gsub => [ "dns_query_name", "\(3\)", "_" ]
      }

      mutate {
        gsub => [ "dns_query_name", "\(\d+\)", "" ]
      }

      # Set timestamp to @timestamp
      date {
        match => [ "timestamp", "M/d/yyyy h:mm:ss aa" ]
      }
      mutate {
        remove_field => [ "timestamp" ]
      }
    }

    if [type] == "dhcp" {
      grok {
        match => { "message" => "%{WIN_DHCP}" }
      }
    }

    if [type] == "event" {
      # Remove unwanted fields
      mutate {
        remove_field => [ "SourceModuleName", "SourceModuleType", "port", "RemoteUserID" ]
      }

      # Create time_received and set value as @timestamp
      mutate {
        add_field => { "time_received" => "%{@timestamp}" }
      }

      # Change field @timestamp to same time as field EventTime
      date {
        match => [ "EventTime", "YYYY-MM-dd HH:mm:ss" ]
      }

      # Mutate field Direction to correct values
      if [Direction] == "%%14592" {
        mutate {
          replace => { "Direction" => "inbound" }
        }
      }
      else if [Direction] == "%%14593" {
        mutate {
          replace => { "Direction" => "outbound" }
        }
      }

      # Mutate field LayerName to correct values
      if [LayerName] == "%%14608" {
        mutate {
          replace => { "LayerName" => "resource_assignment" }
        }
      }
      else if [LayerName] == "%%14610" {
        mutate {
          replace => { "LayerName" => "receive/accept" }
        }
      }
      else if [LayerName] == "%%14611" {
        mutate {
          replace => { "LayerName" => "connect" }
        }
      }

      # Mutate field TargetUserName to remove @wada
      mutate {
        split => { "TargetUserName" => "@" }
        remove_field => [ "[TargetUserName][1]" ]
      }

      # Mutate field Hostname to remove .wada
      mutate {
        split => { "Hostname" => "." }
        remove_field => [ "[Hostname][1]" ]
      }

      # Mutate field TargetUserName to changes spaces to _
      if [TargetUserName] == "ANONYMOUS LOGON" {
        mutate {
          replace => { "TargetUserName" => "anonymous_logon" }
        }
      }

      # Mutate field SourceName to change spaces to -
      if [SourceName] == "Citrix WMI Service" {
        mutate {
          replace => { "SourceName" => "citrix_wmi_service" }
        }
      }
      else if [SourceName] == "Service Control Manager" {
        mutate {
          replace => { "SourceName" => "service_control_manager" }
        }
      }
      else if [SourceName] == "Desktop Window Manager" {
        mutate {
          replace => { "SourceName" => "desktop_window_manager" }
        }
      }
      else if [SourceName] == "VMware Tools" {
        mutate {
          replace => { "SourceName" => "vmware_tools" }
        }
      }
      else if [SourceName] == "MSSQL$MANAGEMENT" {
        mutate {
          replace => { "SourceName" => "mssql_management" }
        }
      }
      else if [SourceName] == "MSExchange ADAccess" {
        mutate {
          replace => { "SourceName" => "msexchange_adaccess" }
        }
      }
      else if [SourceName] == "Kronos HR Payroll" {
        mutate {
          replace => { "SourceName" => "kronos_hr_payroll" }
        }
      }
      else if [SourceName] == "MSExchange Messaging Policies" {
        mutate {
          replace => { "SourceName" => "msexchange_messaging_policies" }
        }
      }
      else if [SourceName] == "LogMeIn Guardian" {
        mutate {
          replace => { "SourceName" => "logmein_guardian" }
        }
      }
      else if [SourceName] == "SQL Server Reporting Services (MSSQLSERVER)" {
        mutate {
          replace => { "SourceName" => "sql_server_reporting_services_(mssqlserver)" }
        }
      }
      else if [SourceName] == "Windows Error Reporting" {
        mutate {
          replace => { "SourceName" => "windows_error_reporting" }
        }
      }
      else if [SourceName] == "MSExchange OWA" {
        mutate {
          replace => { "SourceName" => "msexchange_owa" }
        }
      }
      else if [SourceName] == "MSSQL$SHAREPOINT" {
        mutate {
          replace => { "SourceName" => "mssql_sharepoint" }
        }
      }
      else if [SourceName] == "MSSQL$CITRIX_METAFRAME" {
        mutate {
          replace => { "SourceName" => "mssql_citrix_metaframe" }
        }
      }
      else if [SourceName] == "GFI LanGuard" {
        mutate {
          replace => { "SourceName" => "gfi_languard" }
        }
      }
      else if [SourceName] == "Microsoft-SharePoint Products-SharePoint Foundation" {
        mutate {
          replace => { "SourceName" => "microsoft_sharepoint_products_sharepoint-foundation" }
        }
      }

      # Mutate field Category to change spaces to _
      if [Category] == "Filtering Platform Connection" {
        mutate {
          replace => { "Category" => "filtering_platform_connection" }
        }
      }
      else if [Category] == "Other Object Access Events" {
        mutate {
          replace => { "Category" => "other_object_access_events" }
        }
      }
      else if [Category] == "File System" {
        mutate {
          replace => { "Category" => "file_system" }
        }
      }
      else if [Category] == "Directory Service Access" {
        mutate {
          replace => { "Category" => "directory_service_access" }
        }
      }
      else if [Category] == "Directory Service Replication" {
        mutate {
          replace => { "Category" => "directory_service_replication" }
        }
      }
      else if [Category] == "Kerberos Authentication Service" {
        mutate {
          replace => { "Category" => "kerberos_authentication_service" }
        }
      }
      else if [Category] == "Kerberos Service Ticket Operations" {
        mutate {
          replace => { "Category" => "kerberos_service_ticket_operations" }
        }
      }
      else if [Category] == "Detailed File Share" {
        mutate {
          replace => { "Category" => "detailed_file_share" }
        }
      }
      else if [Category] == "Special Logon" {
        mutate {
          replace => { "Category" => "special_logon" }
        }
      }
      else if [Category] == "Credential Validation" {
        mutate {
          replace => { "Category" => "credential_validation" }
        }
      }
      else if [Category] == "Guest Library API" {
        mutate {
          replace => { "Category" => "guest_library_api" }
        }
      }
      else if [Category] == "Other Policy Change Events" {
        mutate {
          replace => { "Category" => "other_policy_change_events" }
        }
      }
      else if [Category] == "File Share" {
        mutate {
          replace => { "Category" => "file_share" }
        }
      }

      # Add field EventLookup to SourcName Microsoft-Windows-Security-Auditing allow easy lookup to what the EventID is
      if [SourceName] == "Microsoft-Windows-Security-Auditing" {
        mutate {
          add_field => {
            "EventLookup" => "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventid=%{EventID}"
          }
        }
      }

      # Remove unnecessary time fields
      mutate {
        remove_field => [ "EventReceivedTime", "EventTime" ]
        # remove_field => [ "FilterRTID" ]
        # remove_field => [ "Keywords" ]
        # remove_field => [ "LaterRTID" ]
        # remove_field => [ "Opcode" ]
        # remove_field => [ "OpcodeValue" ]
        # remove_field => [ "ProcessID" ]
        # remove_field => [ "ProviderGUID" ]
        # remove_field => [ "RecordNumber" ]
        # remove_field => [ "RemoteMachineID" ]
        # remove_field => [ "SeverityValue" ]
        # remove_field => [ "Task" ]
        # remove_field => [ "ThreadID" ]
        # remove_field => [ "Version" ]
      }

      # PureMessage Filter
      if [SourceName] == "PureMessage" {
        grok {
          match => { "Message" => "%{PUREMESSAGE}" }
          match => { "Message" => "%{GREEDYDATA}" }
        }
      }

      ruby { code => "
        event_hash = event.to_hash
        new_event = {}
        event_hash.keys.each do |key|
          new_event[key.downcase] = event[key]
        end
        event.instance_variable_set(:@data, new_event)
        "
      }
    }
  }
}

output {
  if [type] == "windows" {
    elasticsearch {
      ssl => true
      user => ""
      password => ""
      hosts => [""]
      index => "windows-%{+YYYY.MM.dd}"
      manage_template => false
      workers => 4
    }

    if [Severity] == "CRITICAL" {
      email {
        address => ""
        port =>
        to => ""
        subject => "Critical Event on %{Hostname}"
        body => "%{@timestamp} %{Message}"
      }
    }
  }
}
